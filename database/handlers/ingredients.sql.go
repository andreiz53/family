// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ingredients.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIngredient = `-- name: CreateIngredient :exec
INSERT INTO ingredients (name)
VALUES ($1)
`

func (q *Queries) CreateIngredient(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, createIngredient, name)
	return err
}

const deleteAllIngredients = `-- name: DeleteAllIngredients :exec
DELETE FROM ingredients
`

func (q *Queries) DeleteAllIngredients(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllIngredients)
	return err
}

const deleteIngredient = `-- name: DeleteIngredient :exec
DELETE FROM ingredients
WHERE id = $1
`

func (q *Queries) DeleteIngredient(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteIngredient, id)
	return err
}

const getIngredientByID = `-- name: GetIngredientByID :one
SELECT id, created_at, updated_at, name FROM ingredients
WHERE id = $1
`

func (q *Queries) GetIngredientByID(ctx context.Context, id pgtype.UUID) (Ingredient, error) {
	row := q.db.QueryRow(ctx, getIngredientByID, id)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getIngredients = `-- name: GetIngredients :many
SELECT id, created_at, updated_at, name FROM ingredients
`

func (q *Queries) GetIngredients(ctx context.Context) ([]Ingredient, error) {
	rows, err := q.db.Query(ctx, getIngredients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIngredient = `-- name: UpdateIngredient :exec
UPDATE ingredients SET
name = $1,
updated_at = NOW()
WHERE id = $2
`

type UpdateIngredientParams struct {
	Name string
	ID   pgtype.UUID
}

func (q *Queries) UpdateIngredient(ctx context.Context, arg UpdateIngredientParams) error {
	_, err := q.db.Exec(ctx, updateIngredient, arg.Name, arg.ID)
	return err
}
