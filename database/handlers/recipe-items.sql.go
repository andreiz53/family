// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recipe-items.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRecipeItem = `-- name: CreateRecipeItem :exec
INSERT INTO recipe_items (name)
VALUES ($1)
`

func (q *Queries) CreateRecipeItem(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, createRecipeItem, name)
	return err
}

const deleteRecipeItem = `-- name: DeleteRecipeItem :exec
UPDATE recipe_items
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteRecipeItem(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteRecipeItem, id)
	return err
}

const getRecipeItemByID = `-- name: GetRecipeItemByID :one
SELECT id, created_at, updated_at, deleted_at, name FROM recipe_items
WHERE id = $1
AND deleted_at IS NULL
`

func (q *Queries) GetRecipeItemByID(ctx context.Context, id pgtype.UUID) (RecipeItem, error) {
	row := q.db.QueryRow(ctx, getRecipeItemByID, id)
	var i RecipeItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
	)
	return i, err
}

const getRecipeItems = `-- name: GetRecipeItems :many
SELECT id, created_at, updated_at, deleted_at, name FROM recipe_items
WHERE deleted_at IS NULL
`

func (q *Queries) GetRecipeItems(ctx context.Context) ([]RecipeItem, error) {
	rows, err := q.db.Query(ctx, getRecipeItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecipeItem
	for rows.Next() {
		var i RecipeItem
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipeItem = `-- name: UpdateRecipeItem :exec
UPDATE recipe_items
SET name = $1,
updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateRecipeItem(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, updateRecipeItem, name)
	return err
}
